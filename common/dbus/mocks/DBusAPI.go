// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dbus_internal "github.com/mendersoftware/mender/common/dbus/dbus_internal"
	mock "github.com/stretchr/testify/mock"
)

// DBusAPI is an autogenerated mock type for the DBusAPI type
type DBusAPI struct {
	mock.Mock
}

// BusGet provides a mock function with given fields: _a0
func (_m *DBusAPI) BusGet(_a0 uint) (dbus_internal.Handle, error) {
	ret := _m.Called(_a0)

	var r0 dbus_internal.Handle
	if rf, ok := ret.Get(0).(func(uint) dbus_internal.Handle); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dbus_internal.Handle)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BusOwnNameOnConnection provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBusAPI) BusOwnNameOnConnection(_a0 dbus_internal.Handle, _a1 string, _a2 uint) (uint, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, string, uint) uint); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbus_internal.Handle, string, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BusRegisterInterface provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBusAPI) BusRegisterInterface(_a0 dbus_internal.Handle, _a1 string, _a2 string) (uint, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, string, string) uint); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbus_internal.Handle, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BusUnownName provides a mock function with given fields: _a0
func (_m *DBusAPI) BusUnownName(_a0 uint) {
	_m.Called(_a0)
}

// BusUnregisterInterface provides a mock function with given fields: _a0, _a1
func (_m *DBusAPI) BusUnregisterInterface(_a0 dbus_internal.Handle, _a1 uint) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, uint) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Call provides a mock function with given fields: conn, busName, objectPath, interfaceName, methodName, parameters
func (_m *DBusAPI) Call(conn dbus_internal.Handle, busName string, objectPath string, interfaceName string, methodName string, parameters ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, conn, busName, objectPath, interfaceName, methodName)
	_ca = append(_ca, parameters...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, string, string, string, string, ...interface{}) []interface{}); ok {
		r0 = rf(conn, busName, objectPath, interfaceName, methodName, parameters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbus_internal.Handle, string, string, string, string, ...interface{}) error); ok {
		r1 = rf(conn, busName, objectPath, interfaceName, methodName, parameters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Call0 provides a mock function with given fields: conn, busName, objectPath, interfaceName, methodName
func (_m *DBusAPI) Call0(conn dbus_internal.Handle, busName string, objectPath string, interfaceName string, methodName string) ([]interface{}, error) {
	ret := _m.Called(conn, busName, objectPath, interfaceName, methodName)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, string, string, string, string) []interface{}); ok {
		r0 = rf(conn, busName, objectPath, interfaceName, methodName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbus_internal.Handle, string, string, string, string) error); ok {
		r1 = rf(conn, busName, objectPath, interfaceName, methodName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmitSignal provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *DBusAPI) EmitSignal(_a0 dbus_internal.Handle, _a1 string, _a2 string, _a3 string, _a4 string, _a5 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3, _a4)
	_ca = append(_ca, _a5...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(dbus_internal.Handle, string, string, string, string, ...interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateGUID provides a mock function with given fields:
func (_m *DBusAPI) GenerateGUID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsGUID provides a mock function with given fields: _a0
func (_m *DBusAPI) IsGUID(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MainLoopNew provides a mock function with given fields:
func (_m *DBusAPI) MainLoopNew() dbus_internal.MainLoop {
	ret := _m.Called()

	var r0 dbus_internal.MainLoop
	if rf, ok := ret.Get(0).(func() dbus_internal.MainLoop); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbus_internal.MainLoop)
	}

	return r0
}

// MainLoopQuit provides a mock function with given fields: _a0
func (_m *DBusAPI) MainLoopQuit(_a0 dbus_internal.MainLoop) {
	_m.Called(_a0)
}

// MainLoopRun provides a mock function with given fields: _a0
func (_m *DBusAPI) MainLoopRun(_a0 dbus_internal.MainLoop) {
	_m.Called(_a0)
}

// RegisterMethodCallCallback provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DBusAPI) RegisterMethodCallCallback(_a0 string, _a1 string, _a2 string, _a3 func(string, string, string, []interface{}) ([]interface{}, error)) {
	_m.Called(_a0, _a1, _a2, _a3)
}

// RegisterSignalChannel provides a mock function with given fields: conn, busName, objectPath, interfaceName, methodName, ch
func (_m *DBusAPI) RegisterSignalChannel(conn dbus_internal.Handle, busName string, objectPath string, interfaceName string, methodName string, ch dbus_internal.SignalChannel) {
	_m.Called(conn, busName, objectPath, interfaceName, methodName, ch)
}

// UnregisterMethodCallCallback provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBusAPI) UnregisterMethodCallCallback(_a0 string, _a1 string, _a2 string) {
	_m.Called(_a0, _a1, _a2)
}

// UnregisterSignalChannel provides a mock function with given fields: conn, methodName, ch
func (_m *DBusAPI) UnregisterSignalChannel(conn dbus_internal.Handle, methodName string, ch dbus_internal.SignalChannel) {
	_m.Called(conn, methodName, ch)
}
