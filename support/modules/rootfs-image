#!/bin/sh

set -ue

STATE="$1"
FILES="$2"

if which jq >/dev/null 2>&1; then
    JQ_AVAILABLE=1
else
    JQ_AVAILABLE=0
fi

if which mender-flash >/dev/null 2>&1; then
    MENDER_FLASH_AVAILABLE=1
else
    MENDER_FLASH_AVAILABLE=0
fi

if command -v grub-mender-grubenv-print > /dev/null; then
    PRINTENV=grub-mender-grubenv-print
    SETENV=grub-mender-grubenv-set
else
    PRINTENV=fw_printenv
    SETENV=fw_setenv
fi

parse_conf_file() {
    CONF_FILE="${MENDER_DATASTORE_DIR:-/var/lib/mender}/mender.conf"

    if [ "$JQ_AVAILABLE" = 1 ]; then
        MENDER_ROOTFS_PART_A="$(jq -r .RootfsPartA < "$CONF_FILE")"
        MENDER_ROOTFS_PART_B="$(jq -r .RootfsPartB < "$CONF_FILE")"
    else
        # Fall back to line based parsing. Vulnerable to weird JSON nesting, as well as unexpected
        # newlines, although it is unlikely with a regular configuration file.

        # Poor man's case insensitive match.
        MATCH="[Rr][Oo][Oo][Tt][Ff][Ss][Pp][Aa][Rr][Tt][Aa]"
        MENDER_ROOTFS_PART_A="$(sed -ne '/"'"$MATCH"'" *: *"[^"]*"/ { s/.*"'"$MATCH"'" *: *"\([^"]*\)".*/\1/; p }' "$CONF_FILE")"
        MATCH="[Rr][Oo][Oo][Tt][Ff][Ss][Pp][Aa][Rr][Tt][Bb]"
        MENDER_ROOTFS_PART_B="$(sed -ne '/"'"$MATCH"'" *: *"[^"]*"/ { s/.*"'"$MATCH"'" *: *"\([^"]*\)".*/\1/; p }' "$CONF_FILE")"
    fi

    MENDER_ROOTFS_PART_A_NUMBER="$(echo "$MENDER_ROOTFS_PART_A" | grep -Eo '[0-9]+$')"
    MENDER_ROOTFS_PART_B_NUMBER="$(echo "$MENDER_ROOTFS_PART_B" | grep -Eo '[0-9]+$')"
}

set_upgrade_vars() {
    active_num="$(${PRINTENV} mender_boot_part)"
    active_num="${active_num#mender_boot_part=}"
    if test $active_num -eq $MENDER_ROOTFS_PART_A_NUMBER; then
        active=$MENDER_ROOTFS_PART_A
        passive=$MENDER_ROOTFS_PART_B
        passive_num=$MENDER_ROOTFS_PART_B_NUMBER
    else
        active=$MENDER_ROOTFS_PART_B
        passive=$MENDER_ROOTFS_PART_A
        passive_num=$MENDER_ROOTFS_PART_A_NUMBER
    fi
    passive_num_hex=$(printf '%x' $passive_num)
    upgrade_available="$(${PRINTENV} upgrade_available)"
    upgrade_available="${upgrade_available#upgrade_available=}"
}

ensure_correct_root_mounted() {
    if [ "$(stat -L -c %02t%02T $active)" = "$(stat -L -c %04D /)" ]; then
        return 0
    fi

    # If an upgrade is in progress then it can be on either partition, except in the Download
    # and ArtifactInstall states (not rebooted yet).
    if [ "$upgrade_available" = 1 ] && \
            [ "$STATE" != "Download" ] && \
            [ "$STATE" != "ArtifactInstall" ] && \
            [ "$(stat -L -c %02t%02T $passive)" = "$(stat -L -c %04D /)" ]; then
        return 0
    fi

    echo "Mounted root does not match boot loader environment!" 1>&2
    exit 1
}

check_requirements() {
    parse_conf_file
    set_upgrade_vars
    ensure_correct_root_mounted
}

case "$STATE" in
    ProvidePayloadFileSizes)
        echo "Yes"
        ;;

    Download)
        echo "This module supports DownloadWithFileSizes only" 1>&2
        exit 1
        ;;

    DownloadWithFileSizes)
        check_requirements
        line="$(cat stream-next)"
        file="$(echo $line | cut -d' ' -f1)"
        size="$(echo $line | cut -d' ' -f2)"
        if [ -z "$file" -o -z "$size" ]; then
            echo "Cannot parse line from stream-next, got: $line" 1>&2
            exit 1
        fi
        if [ "$MENDER_FLASH_AVAILABLE" = 1 ]; then
            mender-flash --input-size $size --input $file --output $passive
        else
            cat "$file" > $passive
        fi
        if [ "$(cat stream-next)" != "" ]; then
            echo "More than one file in payload" 1>&2
            exit 1
        fi
        ;;

    ArtifactInstall)
        check_requirements
        ${SETENV} -s - <<EOF
mender_boot_part=$passive_num
mender_boot_part_hex=$passive_num_hex
upgrade_available=1
bootcount=0
EOF
        ;;

    NeedsArtifactReboot)
        echo "Automatic"
        ;;

    SupportsRollback)
        echo "Yes"
        ;;

    ArtifactVerifyReboot)
        check_requirements
        if test "$upgrade_available" != 1; then
            exit 1
        fi
        ;;

    ArtifactVerifyRollbackReboot)
        check_requirements
        if test "$upgrade_available" = 1; then
            exit 1
        fi
        ;;

    ArtifactCommit)
        check_requirements
        if test "$upgrade_available" = 1; then
            ${SETENV} upgrade_available 0
        else
            # If we get here, an upgrade in standalone mode failed to boot and the user is trying to commit from the old OS.
            # This communicates to the user that the upgrade failed.
            echo "Upgrade failed and was reverted: refusing to commit!" 1>&2
            exit 1
        fi
        ;;

    ArtifactRollback)
        check_requirements
        if test "$upgrade_available" = 1; then
            ${SETENV} -s - <<EOF
mender_boot_part=$passive_num
mender_boot_part_hex=$passive_num_hex
upgrade_available=0
EOF
        fi
        ;;
esac
exit 0
